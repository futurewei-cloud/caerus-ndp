/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hdfs.server.datanode.web;

import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Arrays;
import java.io.StringReader;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import static io.netty.buffer.Unpooled.*;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

import io.netty.util.AttributeKey;
import io.netty.util.ReferenceCountUtil;
import io.netty.util.CharsetUtil;
import io.netty.util.ByteProcessor;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.ChannelPromise;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.HttpObject;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.LastHttpContent;

import io.netty.handler.codec.http.HttpContentEncoder;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandler.Sharable;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.DefaultHttpResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.MessageToByteEncoder;
import io.netty.handler.codec.MessageToMessageCodec;

import static io.netty.handler.codec.http.HttpHeaders.Names.CONNECTION;
import static io.netty.handler.codec.http.HttpHeaders.Values.CLOSE;
import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;
import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;

import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.parsers.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import org.apache.hadoop.conf.Configuration;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;

import java.lang.reflect.Field;
import sun.misc.Unsafe;

@Sharable
final class ProjectionPlugin 
    extends MessageToMessageCodec<Object, Object> {

  static final Logger REQLOG = LoggerFactory.getLogger("datanode.webhdfs");
  private Configuration conf;  

  ProjectionPlugin(Configuration conf) {    
    this.conf = conf;    
  }

  @Override
  protected void decode(ChannelHandlerContext ctx, Object msg, List<Object> out) throws Exception {
    //System.out.println("ProjectionPlugin::decode " + msg.getClass().getName());
    if (msg instanceof HttpRequest) {
      HttpRequest req = (HttpRequest)msg;      
      String ndpConfig = req.headers().get("NdpConfig");      
      if (ndpConfig == null){
        out.add(ReferenceCountUtil.retain(msg));
        return;
      }

      //System.out.println("ProjectionPlugin::decode ctx: " + ctx + " channel: " + ctx.channel());      
      //System.out.println(req.uri());
      REQLOG.info("ProjectionPlugin : " + req.getUri());

      long offset = 0L;
      //System.out.println("ProjectionPlugin::decode ndpConfig " + ndpConfig);
      List<NameValuePair> params = URLEncodedUtils.parse(new URI(req.uri()), "UTF-8");
      for (NameValuePair param : params) {
        if (param.getName().equals("offset")) {
          //System.out.println(param.getName() + " : " + param.getValue());
          offset = Long.parseLong(param.getValue());
        }
      }
      try {
        Parser parser = new Parser(ndpConfig, offset);
        ctx.channel().attr(AttributeKey.valueOf("NdpParser")).set(parser);
        ctx.channel().attr(AttributeKey.valueOf("FlushInProgress")).set(false);
      } catch ( Exception e ) {
        //System.out.println("Invalid parser NdpConfig");
        DefaultHttpResponse resp = new DefaultHttpResponse(HTTP_1_1, BAD_REQUEST);
        resp.headers().set(CONNECTION, CLOSE);
        ctx.writeAndFlush(resp).addListener(ChannelFutureListener.CLOSE);
        return;
      }
    }
    out.add(ReferenceCountUtil.retain(msg));
  }

  @Override
  protected void encode(ChannelHandlerContext ctx, Object msg, List<Object> out) throws Exception {
    Parser parser = (Parser) ctx.channel().attr(AttributeKey.valueOf("NdpParser")).get();

    if (msg instanceof ByteBuf && parser != null) {      
      if (parser.is_done()) {
        //ChannelFuture future = ctx.channel().close();        
        Boolean flushInProgress = (Boolean) ctx.channel().attr(AttributeKey.valueOf("FlushInProgress")).get();
        if(!flushInProgress){
          //System.out.println("ProjectionPlugin::encode flushInProgress");
          ctx.channel().attr(AttributeKey.valueOf("FlushInProgress")).set(true);
          ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);
        }        
        out.add(Unpooled.EMPTY_BUFFER);
        return;
      }

      ByteBuf outByteBuf = parser.parse((ByteBuf)msg);      
      out.add(outByteBuf);
      return;
    }

    out.add(ReferenceCountUtil.retain(msg));
  }

  protected class Parser {
    private Unsafe UnSafe;

    private int fieldDelim = ',';
    private int recordDelim = '\n';
    private int quoteDelim = '\"';
    private int columns;
    private int [] project;
    private boolean skipHeader;
    private boolean seekRow;
    private long blockSize;
    private long offset;

    private boolean [] projectMask;
    private int byteCount = 0;
    private byte[] leftOver = null;
    private long totalBytes;
    private byte[] outBytes = null;
    private byte[] inBytes = null;
    public int rowCount = 0;

    private final int MAX_RECORDS = 8192;
    private int[] beginIndex = null;
    private int[] endIndex = null;

    // Strict implementation on https://tools.ietf.org/html/rfc4180 (RFC 4180)
    // Common usage of CSV is US-ASCII
    protected void init() {
      projectMask = new boolean[columns];
      for (int i = 0; i < columns; i++){
          projectMask[i] = false;
      }

      for (int i = 0; i < project.length; i++){
        if (project[i] > columns){
            throw new IllegalArgumentException(String.format("Invalid column [%d] ", project[i]));
        }
        if(projectMask[project[i]]) { // Duplicate columns
            throw new IllegalArgumentException(String.format("Duplicate column [%d] ", project[i]));
        } else {
            projectMask[project[i]] = true;
        }
      }
      totalBytes = 0;
      if (blockSize > 0 && offset > 0) {
        seekRow = true;
        skipHeader = false;
      } else {
        seekRow = false;
      }
      
      beginIndex = new int[columns * MAX_RECORDS];
      endIndex = new int[columns * MAX_RECORDS];
    }

    private Unsafe getUnsafe() throws SecurityException,
            NoSuchFieldException, IllegalArgumentException,
            IllegalAccessException
    {
        Field theUnsafe = Unsafe.class.getDeclaredField("theUnsafe");
        theUnsafe.setAccessible(true);
        Unsafe unsafe = (Unsafe) theUnsafe.get(null);
        return unsafe;
    }

    public Parser(String config, Long offset) {
        this.offset = offset;
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(config));
            Document dom = db.parse(is);
            dom.getDocumentElement().normalize();        
            Element configurationElement = (Element)dom.getElementsByTagName("Configuration").item(0);
            
            Element columnsElement = (Element)configurationElement.getElementsByTagName("Columns").item(0);
            //System.out.println(columnsElement.getTextContent());
            this.columns = Integer.parseInt(columnsElement.getTextContent());

            Element projectElement = (Element)configurationElement.getElementsByTagName("Project").item(0);
            //System.out.println(projectElement.getTextContent());
            String[] cols = projectElement.getTextContent().split(",");
            this.project = new int[cols.length];
            for (int i = 0; i < cols.length; i++) {
                this.project[i] = Integer.parseInt(cols[i].trim());
            }

            Element skipHeaderElement = (Element)configurationElement.getElementsByTagName("SkipHeader").item(0);
            //System.out.println(skipHeaderElement.getTextContent());
            this.skipHeader = Boolean.parseBoolean(skipHeaderElement.getTextContent()); 

            Element blockSizeElement = (Element)configurationElement.getElementsByTagName("BlockSize").item(0);
            //System.out.println(blockSizeElement.getTextContent());
            this.blockSize = Long.parseLong(blockSizeElement.getTextContent());

            this.UnSafe = getUnsafe();
        } catch ( Exception e ) {
            throw new IllegalArgumentException(String.format("Invalid XML format "));
        }
        init();
    }

    /* Return number of of fully processed records */
    private int parseRecords(byte[] inBytes, int index, int bufferBytes) {
      boolean underQuote = false;
      int recordCount = 0;
      int fieldCount = 0;
      int col = 0;
      int row_index = index;

      if (blockSize > 0 && totalBytes > blockSize){
        return 0;
      }

      //long baseOffset = UnSafe.arrayBaseOffset(byte[].class);

      beginIndex[fieldCount] = index;
      for (int i = index; i < bufferBytes; i ++) {        
        byte b = inBytes[i];
        //byte b = UnSafe.getByte(inBytes, (long) (baseOffset + i));
        if (b == quoteDelim){
            underQuote = !underQuote;
        }
        if (!underQuote) {
            if (b == recordDelim || b == fieldDelim) {
                endIndex[fieldCount] = i;
                fieldCount++;
                if(++col == columns){ // End of record
                  col = 0;
                  totalBytes += i+1 - row_index;
                  row_index = i+1;
                  if (++recordCount >= MAX_RECORDS){
                    break;
                  }
                  if (blockSize > 0 && totalBytes > blockSize){
                    break;
                  }
                }
                beginIndex[fieldCount] = i + 1;
            }
        }
      }      
      return recordCount;
    }

    private int parseRecords(long memoryAddress, int index, int bufferBytes) {
      boolean underQuote = false;
      int recordCount = 0;
      int fieldCount = 0;
      int col = 0;
      int row_index = index;

      if (blockSize > 0 && totalBytes > blockSize){
        return 0;
      }      

      long input = memoryAddress + index;
      beginIndex[fieldCount] = index;
      for (int i = index; i < bufferBytes; i ++) {        
        //byte b = inBytes[i];
        byte b = UnSafe.getByte(null, input++);
        if (b == quoteDelim){
            underQuote = !underQuote;
        }
        if (!underQuote) {
            if (b == recordDelim || b == fieldDelim) {
                endIndex[fieldCount] = i;
                fieldCount++;
                if(++col == columns){ // End of record
                  col = 0;
                  totalBytes += i+1 - row_index;
                  row_index = i+1;
                  if (++recordCount >= MAX_RECORDS){
                    break;
                  }
                  if (blockSize > 0 && totalBytes > blockSize){
                    break;
                  }
                }
                beginIndex[fieldCount] = i + 1;
            }
        }
      }      
      return recordCount;
    }

    private int writeColumns(int recordCount, byte[] inBytes, byte[] outBytes, int outIndex) {
      int index = outIndex;      
      
      for(int fieldIndex = 0; fieldIndex < recordCount * columns; fieldIndex += columns) {        
        for (int c : project ) {
          int col = c + fieldIndex;
          int length = endIndex[col] - beginIndex[col];        
          System.arraycopy(inBytes, beginIndex[col], outBytes, index, length);
          index += length;
          outBytes[index++] = (byte) fieldDelim;
        }
        outBytes[index - 1] = (byte)recordDelim;
      }

      return index;
    }

    private int writeColumns(int recordCount, ByteBuf inByteBuf, byte[] outBytes, int outIndex) {
      int index = outIndex;      
      
      for(int fieldIndex = 0; fieldIndex < recordCount * columns; fieldIndex += columns) {        
        for (int c : project ) {
          int col = c + fieldIndex;
          int length = endIndex[col] - beginIndex[col];        
          //System.arraycopy(inBytes, beginIndex[col], outBytes, index, length);
          inByteBuf.getBytes(beginIndex[col], outBytes, index, length);
          index += length;
          outBytes[index++] = (byte) fieldDelim;
        }
        outBytes[index - 1] = (byte)recordDelim;
      }

      return index;
    }

    public boolean is_done() {
      if (blockSize > 0 && totalBytes > blockSize){
        return true;
      }
      return false;
    }

    public ByteBuf parse(ByteBuf inByteBuf) {      
      int readableBytes = inByteBuf.readableBytes();
      int leftOverBytes = 0;      
      
      if (leftOver != null){
          leftOverBytes = leftOver.length;
      }
      int bufferBytes = readableBytes + leftOverBytes;
      
      if (outBytes == null || inBytes == null){
        outBytes = new byte[bufferBytes + 128];
        inBytes = new byte[bufferBytes + 128];
      }
      if (outBytes.length < bufferBytes || inBytes.length < bufferBytes) {
        outBytes = new byte[bufferBytes + 128];
        inBytes = new byte[bufferBytes + 128];
      }

      int index, nextIndex, col, row_index, outIndex;
      index = nextIndex = col = row_index = outIndex = 0;

      if (leftOverBytes > 0) {    
        if (false)   {
          int bytesBeforeRecordDelim = inByteBuf.bytesBefore((byte)recordDelim);
          int firstRecordLength = leftOverBytes + bytesBeforeRecordDelim + 1;
          byte[] firstRecord = new byte[firstRecordLength];
          System.arraycopy(leftOver, 0, firstRecord, 0, leftOverBytes);
          inByteBuf.getBytes(inByteBuf.readerIndex(), firstRecord, leftOverBytes, bytesBeforeRecordDelim + 1);
          int recordCount = parseRecords(firstRecord, index, firstRecordLength);        
          outIndex = writeColumns(recordCount, firstRecord, outBytes, outIndex);
          //System.out.println("recordCount : " + String.valueOf(recordCount) + " outIndex : " + String.valueOf(outIndex));
          index = bytesBeforeRecordDelim + 1;
          row_index = index;        
        } else {
          System.arraycopy(leftOver, 0, inBytes, 0, leftOverBytes);
        }
      }      
      
      if (false){
        //inByteBuf.getBytes(inByteBuf.readerIndex(), inBytes, 0, readableBytes);
        bufferBytes = readableBytes;
      } else {
        inByteBuf.getBytes(inByteBuf.readerIndex(), inBytes, leftOverBytes, readableBytes);
      }

      leftOver = null;

      if (seekRow || skipHeader) {
        seekRow = false;
        skipHeader = false;
        /*
        int bytesBeforeRecordDelim = inByteBuf.bytesBefore((byte)recordDelim);
        index = bytesBeforeRecordDelim + 1;
        totalBytes += (index - row_index );
        row_index = index;
        */
        for (int i = index; i < bufferBytes; i ++) {
          if (inBytes[i] == recordDelim){
            index = i+1;
            totalBytes += (index - row_index );
            row_index = index;            
            break;
          }
        }        
      }
      
      // Main parsing loop
      // https://stackoverflow.com/questions/12226123/busted-how-to-speed-up-a-byte-lookup-to-be-faster-using-sun-misc-unsafe
      while (index < bufferBytes){
        int recordCount = parseRecords(inBytes, index, bufferBytes);
        //int recordCount = parseRecords(inByteBuf.memoryAddress(), index, bufferBytes);
        if (recordCount <= 0){
          break;
        }
        outIndex = writeColumns(recordCount, inBytes, outBytes, outIndex);
        //outIndex = writeColumns(recordCount, inByteBuf, outBytes, outIndex);
        index = endIndex[recordCount * columns - 1] + 1;
        row_index = index;
        if (recordCount < MAX_RECORDS) { // End of data
          break;
        }          
      }
      
      // Preserve remaining data
      leftOver = Arrays.copyOfRange(inBytes, row_index, bufferBytes);
      //leftOver = new byte[bufferBytes - row_index];
      //inByteBuf.getBytes(row_index, leftOver, 0, bufferBytes - row_index);

      ByteBuf outByteBuf = Unpooled.wrappedBuffer(outBytes, 0, outIndex);
      outByteBuf.retain();
      return outByteBuf;
    }
  }

  public static Configuration initializeState(Configuration conf) {
    System.out.println("ProjectionPlugin::initializeState");
    return(new Configuration(conf));
  }  
}
